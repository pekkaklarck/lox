// This file contains various examples used in the book or that I created.
// It can be used for testing and demonstrating purposes but having an actual
// test suite would obviously be better.

var a;
var b = 1 + 2 * 4 / (1 + 3);

1 + 2 * 4 / (1 + 3);

// Your first Lox program!
print "Hello, world!";

print 1 + 2 * 4 / (1 + 3);
print a;
print b;
a = "new";
print a;
print b + 123;

var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

var a = 1;
{
  var b = a + 2;
  print b;
}
print a;

if (true) print "True!";
if (false) 1/0;
if (1 + 2 >= 3)
    print "xxx";
if (1 + 2 > 3) {
    1/0;
} else {
    print "Blocks!";
    print "Rocks!";
}
if (false or true) print "or";
if (false and true) 1/0; else print "and";
if (false and true or false) 1/0;
if (false and true or true) {} else 1/0;
if (false and true or true and false) 1/0;
if (false and true or false or true) {} else 1/0;
print nil and 1/0;
print nil or false;
print nil or false or "yay!" or 1/0;
var i = 5;
while (i > 0) {
    print i;
    i = i - 1;
}

print "Fibonacci!";
var a = 0;
var temp;

for (var b = 1; a < 100000; b = temp + b) {
  print a;
  temp = a;
  a = b;
}
for (var a = 10;; a = a - 1) {
    print a;
    if (a < 5) break;
}
while (true) {
    break;
}
//break;

print clock();


fun sayHi(first, last) {
  print "Hi, " + first + " " + last + "!";
}

print sayHi;
sayHi("Dear", "Reader");

fun add(a, b) {
  return a + b;
}
print add(1, 2);

//return 1;

print "Recursive Fibonacci!";
fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 10; i = i + 1) {
  print fib(i);
}


fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".
counter(); // "3".


class Cake {
  init(pieces) {
    fun x() {
        return "fun in init returns!";
    }
    this.pieces = pieces;
    print x();
    return;
    1/0;
  }

  taste() {
    var adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }

  eatPiece() {
    if (this.pieces == 0)
      print "Nothing left";
    else {
      this.pieces = this.pieces - 1;
      print "Tasty " + this.flavor + " cake!";
    }
  }

  piecesLeft() {
    return this.pieces;
  }
}

var cake = Cake(4);
var bake = Cake(3);
cake.flavor = "German chocolate";
cake.taste(); // Prints "The German chocolate cake is delicious!".
bake.flavor = "strawberry";
bake.taste();
cake.taste();

print cake.piecesLeft();
print bake.piecesLeft();
while (cake.piecesLeft() > 0)
  cake.eatPiece();
cake.eatPiece();
print cake.init(1);


class Doughnut {
  cook() {
    print "Fry until golden brown.";
  }
}

class BostonCream < Doughnut {
  cook() {
    super.cook();
    print "Pipe full of custard and coat with chocolate.";
  }
}

BostonCream().cook();
